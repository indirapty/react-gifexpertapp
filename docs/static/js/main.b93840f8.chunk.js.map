{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEfC,mBAAS,IAFM,mBAE5CC,EAF4C,KAEhCC,EAFgC,KAkBnD,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAMC,iBACFJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GAEvBF,EAAcE,EAAMQ,OAAOF,UAoBvB,4C,2BC7BCG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAeZM,GAfY,4CAAH,sDCGPO,EAAe,SAACf,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNS,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WACNpB,EAAQC,GAAUoB,MAAK,SAACC,GAEpBH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAIlB,CAAChB,IAEGiB,GCnBEK,EAAc,SAAC,GAAoB,IAAlBV,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,yBAAKqB,UAAU,0CACX,yBAAKC,IAAKtB,EAAKuB,IAAKb,IAEpB,2BAAIA,KCiBDc,EAtBQ,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EAEHe,EAAaf,GAAjCa,EAFuB,EAE7BN,KAAcS,EAFe,EAEfA,QACtB,OACI,oCACI,4BAAKhB,GACJgB,GAAW,uBAAGO,UAAU,yCAAb,WACZ,yBAAKA,UAAU,aAEPV,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UCmBjBkB,EA9BM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,cAFvB,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KASvB,OACI,oCACI,4CACA,6BAEA,kBAACD,EAAD,CAAaC,cAAeA,IAG5B,4BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,U,MCrBtC8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.b93840f8.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nexport default function AddCategory({ setCategories }) {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (event) => {\n\n        setInputValue(event.target.value);\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (inputValue.trim().length > 2) {\n\n            setCategories((cats => [inputValue, ...cats]));\n            setInputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n\n            />\n            <h2>AddCategory</h2>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=6x6JZRC2wLWIaz1jBf0kpASyY6vIspZA`\n\n    const response = await fetch(url);\n    const { data } = await response.json()\n\n    const gifs = data.map((img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n\n    });\n\n    return gifs;\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category).then((imgs) => {\n\n            setstate({\n                data: imgs,\n                loading: false\n            })\n\n        });\n    }, [category])\n\n    return state;\n}\n\nexport default useFetchGifs;\n","import React from 'react';\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}>\n            </img>\n            <p>{title}</p>\n        </div>\n\n    )\n}\n\nexport default GifGridItem;\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p className=\"card animate__animated animate__flash\">Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map((img) => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img} />\n                    ))\n\n                }\n            </div>\n        </>\n\n    )\n}\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One punch'])\n\n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'HunterXHunter']);\n    //     setCategories((cats => [...cats, 'HunterXHunter']))\n    // };\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <hr />\n\n            <AddCategory setCategories={setCategories}\n            />\n\n            <ol>\n                {\n                    categories.map(category =>\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    )\n                }\n            </ol>\n        </>\n    );\n}\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}